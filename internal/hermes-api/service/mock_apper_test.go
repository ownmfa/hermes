// Code generated by MockGen. DO NOT EDIT.
// Source: app.go
//
// Generated by this command:
//
//	mockgen -source app.go -destination mock_apper_test.go -package service
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"
	time "time"

	api "github.com/ownmfa/proto/go/api"
	gomock "go.uber.org/mock/gomock"
)

// MockApper is a mock of Apper interface.
type MockApper struct {
	ctrl     *gomock.Controller
	recorder *MockApperMockRecorder
	isgomock struct{}
}

// MockApperMockRecorder is the mock recorder for MockApper.
type MockApperMockRecorder struct {
	mock *MockApper
}

// NewMockApper creates a new mock instance.
func NewMockApper(ctrl *gomock.Controller) *MockApper {
	mock := &MockApper{ctrl: ctrl}
	mock.recorder = &MockApperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApper) EXPECT() *MockApperMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockApper) Create(ctx context.Context, app *api.App) (*api.App, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, app)
	ret0, _ := ret[0].(*api.App)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockApperMockRecorder) Create(ctx, app any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockApper)(nil).Create), ctx, app)
}

// Delete mocks base method.
func (m *MockApper) Delete(ctx context.Context, appID, orgID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, appID, orgID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockApperMockRecorder) Delete(ctx, appID, orgID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockApper)(nil).Delete), ctx, appID, orgID)
}

// List mocks base method.
func (m *MockApper) List(ctx context.Context, orgID string, lBoundTS time.Time, prevID string, limit int32) ([]*api.App, int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, orgID, lBoundTS, prevID, limit)
	ret0, _ := ret[0].([]*api.App)
	ret1, _ := ret[1].(int32)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockApperMockRecorder) List(ctx, orgID, lBoundTS, prevID, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockApper)(nil).List), ctx, orgID, lBoundTS, prevID, limit)
}

// Read mocks base method.
func (m *MockApper) Read(ctx context.Context, appID, orgID string) (*api.App, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", ctx, appID, orgID)
	ret0, _ := ret[0].(*api.App)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockApperMockRecorder) Read(ctx, appID, orgID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockApper)(nil).Read), ctx, appID, orgID)
}

// Update mocks base method.
func (m *MockApper) Update(ctx context.Context, app *api.App) (*api.App, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, app)
	ret0, _ := ret[0].(*api.App)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockApperMockRecorder) Update(ctx, app any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockApper)(nil).Update), ctx, app)
}
