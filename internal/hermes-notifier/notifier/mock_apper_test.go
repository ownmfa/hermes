// Code generated by MockGen. DO NOT EDIT.
// Source: notifier.go

// Package notifier is a generated GoMock package.
package notifier

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	api "github.com/ownmfa/api/go/api"
	oath "github.com/ownmfa/hermes/pkg/oath"
)

// Mockapper is a mock of apper interface.
type Mockapper struct {
	ctrl     *gomock.Controller
	recorder *MockapperMockRecorder
}

// MockapperMockRecorder is the mock recorder for Mockapper.
type MockapperMockRecorder struct {
	mock *Mockapper
}

// NewMockapper creates a new mock instance.
func NewMockapper(ctrl *gomock.Controller) *Mockapper {
	mock := &Mockapper{ctrl: ctrl}
	mock.recorder = &MockapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockapper) EXPECT() *MockapperMockRecorder {
	return m.recorder
}

// Read mocks base method.
func (m *Mockapper) Read(ctx context.Context, appID, orgID string) (*api.App, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", ctx, appID, orgID)
	ret0, _ := ret[0].(*api.App)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockapperMockRecorder) Read(ctx, appID, orgID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*Mockapper)(nil).Read), ctx, appID, orgID)
}

// Mockidentityer is a mock of identityer interface.
type Mockidentityer struct {
	ctrl     *gomock.Controller
	recorder *MockidentityerMockRecorder
}

// MockidentityerMockRecorder is the mock recorder for Mockidentityer.
type MockidentityerMockRecorder struct {
	mock *Mockidentityer
}

// NewMockidentityer creates a new mock instance.
func NewMockidentityer(ctrl *gomock.Controller) *Mockidentityer {
	mock := &Mockidentityer{ctrl: ctrl}
	mock.recorder = &MockidentityerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockidentityer) EXPECT() *MockidentityerMockRecorder {
	return m.recorder
}

// Read mocks base method.
func (m *Mockidentityer) Read(ctx context.Context, identityID, orgID, appID string) (*api.Identity, *oath.OTP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", ctx, identityID, orgID, appID)
	ret0, _ := ret[0].(*api.Identity)
	ret1, _ := ret[1].(*oath.OTP)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Read indicates an expected call of Read.
func (mr *MockidentityerMockRecorder) Read(ctx, identityID, orgID, appID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*Mockidentityer)(nil).Read), ctx, identityID, orgID, appID)
}
