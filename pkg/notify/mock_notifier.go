// Code generated by MockGen. DO NOT EDIT.
// Source: notifier.go
//
// Generated by this command:
//
//	mockgen -source notifier.go -destination mock_notifier.go -package notify
//

// Package notify is a generated GoMock package.
package notify

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockNotifier is a mock of Notifier interface.
type MockNotifier struct {
	ctrl     *gomock.Controller
	recorder *MockNotifierMockRecorder
}

// MockNotifierMockRecorder is the mock recorder for MockNotifier.
type MockNotifierMockRecorder struct {
	mock *MockNotifier
}

// NewMockNotifier creates a new mock instance.
func NewMockNotifier(ctrl *gomock.Controller) *MockNotifier {
	mock := &MockNotifier{ctrl: ctrl}
	mock.recorder = &MockNotifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotifier) EXPECT() *MockNotifierMockRecorder {
	return m.recorder
}

// Email mocks base method.
func (m *MockNotifier) Email(ctx context.Context, displayName, from, to, subject, body, htmlBody string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Email", ctx, displayName, from, to, subject, body, htmlBody)
	ret0, _ := ret[0].(error)
	return ret0
}

// Email indicates an expected call of Email.
func (mr *MockNotifierMockRecorder) Email(ctx, displayName, from, to, subject, body, htmlBody any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Email", reflect.TypeOf((*MockNotifier)(nil).Email), ctx, displayName, from, to, subject, body, htmlBody)
}

// Pushover mocks base method.
func (m *MockNotifier) Pushover(ctx context.Context, userKey, displayName, passcode string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pushover", ctx, userKey, displayName, passcode)
	ret0, _ := ret[0].(error)
	return ret0
}

// Pushover indicates an expected call of Pushover.
func (mr *MockNotifierMockRecorder) Pushover(ctx, userKey, displayName, passcode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pushover", reflect.TypeOf((*MockNotifier)(nil).Pushover), ctx, userKey, displayName, passcode)
}

// PushoverByApp mocks base method.
func (m *MockNotifier) PushoverByApp(ctx context.Context, appKey, userKey, subject, body string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PushoverByApp", ctx, appKey, userKey, subject, body)
	ret0, _ := ret[0].(error)
	return ret0
}

// PushoverByApp indicates an expected call of PushoverByApp.
func (mr *MockNotifierMockRecorder) PushoverByApp(ctx, appKey, userKey, subject, body any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PushoverByApp", reflect.TypeOf((*MockNotifier)(nil).PushoverByApp), ctx, appKey, userKey, subject, body)
}

// SMS mocks base method.
func (m *MockNotifier) SMS(ctx context.Context, phone, displayName, passcode string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SMS", ctx, phone, displayName, passcode)
	ret0, _ := ret[0].(error)
	return ret0
}

// SMS indicates an expected call of SMS.
func (mr *MockNotifierMockRecorder) SMS(ctx, phone, displayName, passcode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SMS", reflect.TypeOf((*MockNotifier)(nil).SMS), ctx, phone, displayName, passcode)
}

// ValidatePushover mocks base method.
func (m *MockNotifier) ValidatePushover(userKey string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidatePushover", userKey)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidatePushover indicates an expected call of ValidatePushover.
func (mr *MockNotifierMockRecorder) ValidatePushover(userKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidatePushover", reflect.TypeOf((*MockNotifier)(nil).ValidatePushover), userKey)
}

// ValidateSMS mocks base method.
func (m *MockNotifier) ValidateSMS(ctx context.Context, phone string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateSMS", ctx, phone)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateSMS indicates an expected call of ValidateSMS.
func (mr *MockNotifierMockRecorder) ValidateSMS(ctx, phone any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateSMS", reflect.TypeOf((*MockNotifier)(nil).ValidateSMS), ctx, phone)
}
