// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/app_identity.proto

package api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// define the regex for a UUID once up-front
var _app_identity_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on App with the rules defined in the proto
// definition for this message. If any rules are violated, an error is
// returned. When asked to return all errors, validation continues after first
// violation, and the result is a list of violation errors wrapped in
// AppMultiError, or nil if none found. Otherwise, only the first error is
// returned, if any.
func (m *App) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for OrgId

	if l := utf8.RuneCountInString(m.GetName()); l < 5 || l > 40 {
		err := AppValidationError{
			field:  "Name",
			reason: "value length must be between 5 and 40 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetSubjectTemplate()) > 1024 {
		err := AppValidationError{
			field:  "SubjectTemplate",
			reason: "value length must be at most 1024 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetTextBodyTemplate()) > 4096 {
		err := AppValidationError{
			field:  "TextBodyTemplate",
			reason: "value length must be at most 4096 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetHtmlBodyTemplate()) > 4096 {
		err := AppValidationError{
			field:  "HtmlBodyTemplate",
			reason: "value length must be at most 4096 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate(bool) error }); ok {
		if err := v.Validate(all); err != nil {
			err = AppValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
	}

	if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate(bool) error }); ok {
		if err := v.Validate(all); err != nil {
			err = AppValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
	}

	if len(errors) > 0 {
		return AppMultiError(errors)
	}
	return nil
}

// AppMultiError is an error wrapping multiple validation errors returned by
// App.Validate(true) if the designated constraints aren't met.
type AppMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AppMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AppMultiError) AllErrors() []error { return m }

// AppValidationError is the validation error returned by App.Validate if the
// designated constraints aren't met.
type AppValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AppValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AppValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AppValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AppValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AppValidationError) ErrorName() string { return "AppValidationError" }

// Error satisfies the builtin error interface
func (e AppValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AppValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AppValidationError{}

// Validate checks the field values on CreateAppRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned. When asked to return all errors, validation continues
// after first violation, and the result is a list of violation errors wrapped
// in CreateAppRequestMultiError, or nil if none found. Otherwise, only the
// first error is returned, if any.
func (m *CreateAppRequest) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetApp() == nil {
		err := CreateAppRequestValidationError{
			field:  "App",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if v, ok := interface{}(m.GetApp()).(interface{ Validate(bool) error }); ok {
		if err := v.Validate(all); err != nil {
			err = CreateAppRequestValidationError{
				field:  "App",
				reason: "embedded message failed validation",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
	}

	if len(errors) > 0 {
		return CreateAppRequestMultiError(errors)
	}
	return nil
}

// CreateAppRequestMultiError is an error wrapping multiple validation errors
// returned by CreateAppRequest.Validate(true) if the designated constraints
// aren't met.
type CreateAppRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAppRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAppRequestMultiError) AllErrors() []error { return m }

// CreateAppRequestValidationError is the validation error returned by
// CreateAppRequest.Validate if the designated constraints aren't met.
type CreateAppRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAppRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAppRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAppRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAppRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAppRequestValidationError) ErrorName() string { return "CreateAppRequestValidationError" }

// Error satisfies the builtin error interface
func (e CreateAppRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAppRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAppRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAppRequestValidationError{}

// Validate checks the field values on GetAppRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned. When asked to return all errors, validation continues after
// first violation, and the result is a list of violation errors wrapped in
// GetAppRequestMultiError, or nil if none found. Otherwise, only the first
// error is returned, if any.
func (m *GetAppRequest) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = GetAppRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetAppRequestMultiError(errors)
	}
	return nil
}

func (m *GetAppRequest) _validateUuid(uuid string) error {
	if matched := _app_identity_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetAppRequestMultiError is an error wrapping multiple validation errors
// returned by GetAppRequest.Validate(true) if the designated constraints
// aren't met.
type GetAppRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAppRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAppRequestMultiError) AllErrors() []error { return m }

// GetAppRequestValidationError is the validation error returned by
// GetAppRequest.Validate if the designated constraints aren't met.
type GetAppRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAppRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAppRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAppRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAppRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAppRequestValidationError) ErrorName() string { return "GetAppRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetAppRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAppRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAppRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAppRequestValidationError{}

// Validate checks the field values on UpdateAppRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned. When asked to return all errors, validation continues
// after first violation, and the result is a list of violation errors wrapped
// in UpdateAppRequestMultiError, or nil if none found. Otherwise, only the
// first error is returned, if any.
func (m *UpdateAppRequest) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetApp() == nil {
		err := UpdateAppRequestValidationError{
			field:  "App",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if v, ok := interface{}(m.GetApp()).(interface{ Validate(bool) error }); ok {
		if err := v.Validate(all); err != nil {
			err = UpdateAppRequestValidationError{
				field:  "App",
				reason: "embedded message failed validation",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
	}

	if v, ok := interface{}(m.GetUpdateMask()).(interface{ Validate(bool) error }); ok {
		if err := v.Validate(all); err != nil {
			err = UpdateAppRequestValidationError{
				field:  "UpdateMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
	}

	if len(errors) > 0 {
		return UpdateAppRequestMultiError(errors)
	}
	return nil
}

// UpdateAppRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateAppRequest.Validate(true) if the designated constraints
// aren't met.
type UpdateAppRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAppRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAppRequestMultiError) AllErrors() []error { return m }

// UpdateAppRequestValidationError is the validation error returned by
// UpdateAppRequest.Validate if the designated constraints aren't met.
type UpdateAppRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAppRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAppRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAppRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAppRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAppRequestValidationError) ErrorName() string { return "UpdateAppRequestValidationError" }

// Error satisfies the builtin error interface
func (e UpdateAppRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAppRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAppRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAppRequestValidationError{}

// Validate checks the field values on DeleteAppRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned. When asked to return all errors, validation continues
// after first violation, and the result is a list of violation errors wrapped
// in DeleteAppRequestMultiError, or nil if none found. Otherwise, only the
// first error is returned, if any.
func (m *DeleteAppRequest) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = DeleteAppRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteAppRequestMultiError(errors)
	}
	return nil
}

func (m *DeleteAppRequest) _validateUuid(uuid string) error {
	if matched := _app_identity_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// DeleteAppRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteAppRequest.Validate(true) if the designated constraints
// aren't met.
type DeleteAppRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAppRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAppRequestMultiError) AllErrors() []error { return m }

// DeleteAppRequestValidationError is the validation error returned by
// DeleteAppRequest.Validate if the designated constraints aren't met.
type DeleteAppRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAppRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAppRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAppRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAppRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAppRequestValidationError) ErrorName() string { return "DeleteAppRequestValidationError" }

// Error satisfies the builtin error interface
func (e DeleteAppRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAppRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAppRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAppRequestValidationError{}

// Validate checks the field values on ListAppsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned. When asked to return all errors, validation continues
// after first violation, and the result is a list of violation errors wrapped
// in ListAppsRequestMultiError, or nil if none found. Otherwise, only the
// first error is returned, if any.
func (m *ListAppsRequest) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPageSize() > 250 {
		err := ListAppsRequestValidationError{
			field:  "PageSize",
			reason: "value must be less than or equal to 250",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListAppsRequestMultiError(errors)
	}
	return nil
}

// ListAppsRequestMultiError is an error wrapping multiple validation errors
// returned by ListAppsRequest.Validate(true) if the designated constraints
// aren't met.
type ListAppsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAppsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAppsRequestMultiError) AllErrors() []error { return m }

// ListAppsRequestValidationError is the validation error returned by
// ListAppsRequest.Validate if the designated constraints aren't met.
type ListAppsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAppsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAppsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAppsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAppsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAppsRequestValidationError) ErrorName() string { return "ListAppsRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListAppsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAppsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAppsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAppsRequestValidationError{}

// Validate checks the field values on ListAppsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned. When asked to return all errors, validation continues
// after first violation, and the result is a list of violation errors wrapped
// in ListAppsResponseMultiError, or nil if none found. Otherwise, only the
// first error is returned, if any.
func (m *ListAppsResponse) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetApps() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate(bool) error }); ok {
			if err := v.Validate(all); err != nil {
				err = ListAppsResponseValidationError{
					field:  fmt.Sprintf("Apps[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}
		}

	}

	// no validation rules for NextPageToken

	// no validation rules for TotalSize

	if len(errors) > 0 {
		return ListAppsResponseMultiError(errors)
	}
	return nil
}

// ListAppsResponseMultiError is an error wrapping multiple validation errors
// returned by ListAppsResponse.Validate(true) if the designated constraints
// aren't met.
type ListAppsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAppsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAppsResponseMultiError) AllErrors() []error { return m }

// ListAppsResponseValidationError is the validation error returned by
// ListAppsResponse.Validate if the designated constraints aren't met.
type ListAppsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAppsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAppsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAppsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAppsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAppsResponseValidationError) ErrorName() string { return "ListAppsResponseValidationError" }

// Error satisfies the builtin error interface
func (e ListAppsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAppsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAppsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAppsResponseValidationError{}

// Validate checks the field values on SoftwareHOTPMethod with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in SoftwareHOTPMethodMultiError, or nil if none found.
// Otherwise, only the first error is returned, if any.
func (m *SoftwareHOTPMethod) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Hash

	if m.GetDigits() != 0 {

		if val := m.GetDigits(); val < 6 || val > 10 {
			err := SoftwareHOTPMethodValidationError{
				field:  "Digits",
				reason: "value must be inside range [6, 10]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	// no validation rules for Counter

	if len(errors) > 0 {
		return SoftwareHOTPMethodMultiError(errors)
	}
	return nil
}

// SoftwareHOTPMethodMultiError is an error wrapping multiple validation errors
// returned by SoftwareHOTPMethod.Validate(true) if the designated constraints
// aren't met.
type SoftwareHOTPMethodMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SoftwareHOTPMethodMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SoftwareHOTPMethodMultiError) AllErrors() []error { return m }

// SoftwareHOTPMethodValidationError is the validation error returned by
// SoftwareHOTPMethod.Validate if the designated constraints aren't met.
type SoftwareHOTPMethodValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SoftwareHOTPMethodValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SoftwareHOTPMethodValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SoftwareHOTPMethodValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SoftwareHOTPMethodValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SoftwareHOTPMethodValidationError) ErrorName() string {
	return "SoftwareHOTPMethodValidationError"
}

// Error satisfies the builtin error interface
func (e SoftwareHOTPMethodValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSoftwareHOTPMethod.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SoftwareHOTPMethodValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SoftwareHOTPMethodValidationError{}

// Validate checks the field values on SoftwareTOTPMethod with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in SoftwareTOTPMethodMultiError, or nil if none found.
// Otherwise, only the first error is returned, if any.
func (m *SoftwareTOTPMethod) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Hash

	if m.GetDigits() != 0 {

		if val := m.GetDigits(); val < 6 || val > 10 {
			err := SoftwareTOTPMethodValidationError{
				field:  "Digits",
				reason: "value must be inside range [6, 10]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return SoftwareTOTPMethodMultiError(errors)
	}
	return nil
}

// SoftwareTOTPMethodMultiError is an error wrapping multiple validation errors
// returned by SoftwareTOTPMethod.Validate(true) if the designated constraints
// aren't met.
type SoftwareTOTPMethodMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SoftwareTOTPMethodMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SoftwareTOTPMethodMultiError) AllErrors() []error { return m }

// SoftwareTOTPMethodValidationError is the validation error returned by
// SoftwareTOTPMethod.Validate if the designated constraints aren't met.
type SoftwareTOTPMethodValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SoftwareTOTPMethodValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SoftwareTOTPMethodValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SoftwareTOTPMethodValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SoftwareTOTPMethodValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SoftwareTOTPMethodValidationError) ErrorName() string {
	return "SoftwareTOTPMethodValidationError"
}

// Error satisfies the builtin error interface
func (e SoftwareTOTPMethodValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSoftwareTOTPMethod.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SoftwareTOTPMethodValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SoftwareTOTPMethodValidationError{}

// Validate checks the field values on GoogleAuthHOTPMethod with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in GoogleAuthHOTPMethodMultiError, or nil if none found.
// Otherwise, only the first error is returned, if any.
func (m *GoogleAuthHOTPMethod) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GoogleAuthHOTPMethodMultiError(errors)
	}
	return nil
}

// GoogleAuthHOTPMethodMultiError is an error wrapping multiple validation
// errors returned by GoogleAuthHOTPMethod.Validate(true) if the designated
// constraints aren't met.
type GoogleAuthHOTPMethodMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GoogleAuthHOTPMethodMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GoogleAuthHOTPMethodMultiError) AllErrors() []error { return m }

// GoogleAuthHOTPMethodValidationError is the validation error returned by
// GoogleAuthHOTPMethod.Validate if the designated constraints aren't met.
type GoogleAuthHOTPMethodValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GoogleAuthHOTPMethodValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GoogleAuthHOTPMethodValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GoogleAuthHOTPMethodValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GoogleAuthHOTPMethodValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GoogleAuthHOTPMethodValidationError) ErrorName() string {
	return "GoogleAuthHOTPMethodValidationError"
}

// Error satisfies the builtin error interface
func (e GoogleAuthHOTPMethodValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGoogleAuthHOTPMethod.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GoogleAuthHOTPMethodValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GoogleAuthHOTPMethodValidationError{}

// Validate checks the field values on GoogleAuthTOTPMethod with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in GoogleAuthTOTPMethodMultiError, or nil if none found.
// Otherwise, only the first error is returned, if any.
func (m *GoogleAuthTOTPMethod) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GoogleAuthTOTPMethodMultiError(errors)
	}
	return nil
}

// GoogleAuthTOTPMethodMultiError is an error wrapping multiple validation
// errors returned by GoogleAuthTOTPMethod.Validate(true) if the designated
// constraints aren't met.
type GoogleAuthTOTPMethodMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GoogleAuthTOTPMethodMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GoogleAuthTOTPMethodMultiError) AllErrors() []error { return m }

// GoogleAuthTOTPMethodValidationError is the validation error returned by
// GoogleAuthTOTPMethod.Validate if the designated constraints aren't met.
type GoogleAuthTOTPMethodValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GoogleAuthTOTPMethodValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GoogleAuthTOTPMethodValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GoogleAuthTOTPMethodValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GoogleAuthTOTPMethodValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GoogleAuthTOTPMethodValidationError) ErrorName() string {
	return "GoogleAuthTOTPMethodValidationError"
}

// Error satisfies the builtin error interface
func (e GoogleAuthTOTPMethodValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGoogleAuthTOTPMethod.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GoogleAuthTOTPMethodValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GoogleAuthTOTPMethodValidationError{}

// Validate checks the field values on MicrosoftAuthTOTPMethod with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in MicrosoftAuthTOTPMethodMultiError, or nil if none found.
// Otherwise, only the first error is returned, if any.
func (m *MicrosoftAuthTOTPMethod) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return MicrosoftAuthTOTPMethodMultiError(errors)
	}
	return nil
}

// MicrosoftAuthTOTPMethodMultiError is an error wrapping multiple validation
// errors returned by MicrosoftAuthTOTPMethod.Validate(true) if the designated
// constraints aren't met.
type MicrosoftAuthTOTPMethodMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MicrosoftAuthTOTPMethodMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MicrosoftAuthTOTPMethodMultiError) AllErrors() []error { return m }

// MicrosoftAuthTOTPMethodValidationError is the validation error returned by
// MicrosoftAuthTOTPMethod.Validate if the designated constraints aren't met.
type MicrosoftAuthTOTPMethodValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MicrosoftAuthTOTPMethodValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MicrosoftAuthTOTPMethodValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MicrosoftAuthTOTPMethodValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MicrosoftAuthTOTPMethodValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MicrosoftAuthTOTPMethodValidationError) ErrorName() string {
	return "MicrosoftAuthTOTPMethodValidationError"
}

// Error satisfies the builtin error interface
func (e MicrosoftAuthTOTPMethodValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMicrosoftAuthTOTPMethod.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MicrosoftAuthTOTPMethodValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MicrosoftAuthTOTPMethodValidationError{}

// Validate checks the field values on HardwareHOTPMethod with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in HardwareHOTPMethodMultiError, or nil if none found.
// Otherwise, only the first error is returned, if any.
func (m *HardwareHOTPMethod) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Hash

	if m.GetDigits() != 0 {

		if val := m.GetDigits(); val < 6 || val > 10 {
			err := HardwareHOTPMethodValidationError{
				field:  "Digits",
				reason: "value must be inside range [6, 10]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	// no validation rules for Counter

	// no validation rules for Secret

	if len(errors) > 0 {
		return HardwareHOTPMethodMultiError(errors)
	}
	return nil
}

// HardwareHOTPMethodMultiError is an error wrapping multiple validation errors
// returned by HardwareHOTPMethod.Validate(true) if the designated constraints
// aren't met.
type HardwareHOTPMethodMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HardwareHOTPMethodMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HardwareHOTPMethodMultiError) AllErrors() []error { return m }

// HardwareHOTPMethodValidationError is the validation error returned by
// HardwareHOTPMethod.Validate if the designated constraints aren't met.
type HardwareHOTPMethodValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HardwareHOTPMethodValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HardwareHOTPMethodValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HardwareHOTPMethodValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HardwareHOTPMethodValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HardwareHOTPMethodValidationError) ErrorName() string {
	return "HardwareHOTPMethodValidationError"
}

// Error satisfies the builtin error interface
func (e HardwareHOTPMethodValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHardwareHOTPMethod.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HardwareHOTPMethodValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HardwareHOTPMethodValidationError{}

// Validate checks the field values on HardwareTOTPMethod with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in HardwareTOTPMethodMultiError, or nil if none found.
// Otherwise, only the first error is returned, if any.
func (m *HardwareTOTPMethod) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Hash

	if m.GetDigits() != 0 {

		if val := m.GetDigits(); val < 6 || val > 10 {
			err := HardwareTOTPMethodValidationError{
				field:  "Digits",
				reason: "value must be inside range [6, 10]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	// no validation rules for Secret

	if len(errors) > 0 {
		return HardwareTOTPMethodMultiError(errors)
	}
	return nil
}

// HardwareTOTPMethodMultiError is an error wrapping multiple validation errors
// returned by HardwareTOTPMethod.Validate(true) if the designated constraints
// aren't met.
type HardwareTOTPMethodMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HardwareTOTPMethodMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HardwareTOTPMethodMultiError) AllErrors() []error { return m }

// HardwareTOTPMethodValidationError is the validation error returned by
// HardwareTOTPMethod.Validate if the designated constraints aren't met.
type HardwareTOTPMethodValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HardwareTOTPMethodValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HardwareTOTPMethodValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HardwareTOTPMethodValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HardwareTOTPMethodValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HardwareTOTPMethodValidationError) ErrorName() string {
	return "HardwareTOTPMethodValidationError"
}

// Error satisfies the builtin error interface
func (e HardwareTOTPMethodValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHardwareTOTPMethod.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HardwareTOTPMethodValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HardwareTOTPMethodValidationError{}

// Validate checks the field values on Identity with the rules defined in the
// proto definition for this message. If any rules are violated, an error is
// returned. When asked to return all errors, validation continues after first
// violation, and the result is a list of violation errors wrapped in
// IdentityMultiError, or nil if none found. Otherwise, only the first error
// is returned, if any.
func (m *Identity) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for OrgId

	// no validation rules for AppId

	if l := utf8.RuneCountInString(m.GetComment()); l < 5 || l > 80 {
		err := IdentityValidationError{
			field:  "Comment",
			reason: "value length must be between 5 and 80 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Status

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate(bool) error }); ok {
		if err := v.Validate(all); err != nil {
			err = IdentityValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
	}

	if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate(bool) error }); ok {
		if err := v.Validate(all); err != nil {
			err = IdentityValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
	}

	switch m.MethodOneof.(type) {

	case *Identity_SoftwareHotpMethod:

		if v, ok := interface{}(m.GetSoftwareHotpMethod()).(interface{ Validate(bool) error }); ok {
			if err := v.Validate(all); err != nil {
				err = IdentityValidationError{
					field:  "SoftwareHotpMethod",
					reason: "embedded message failed validation",
					cause:  err,
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}
		}

	case *Identity_SoftwareTotpMethod:

		if v, ok := interface{}(m.GetSoftwareTotpMethod()).(interface{ Validate(bool) error }); ok {
			if err := v.Validate(all); err != nil {
				err = IdentityValidationError{
					field:  "SoftwareTotpMethod",
					reason: "embedded message failed validation",
					cause:  err,
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}
		}

	case *Identity_GoogleAuthHotpMethod:

		if v, ok := interface{}(m.GetGoogleAuthHotpMethod()).(interface{ Validate(bool) error }); ok {
			if err := v.Validate(all); err != nil {
				err = IdentityValidationError{
					field:  "GoogleAuthHotpMethod",
					reason: "embedded message failed validation",
					cause:  err,
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}
		}

	case *Identity_GoogleAuthTotpMethod:

		if v, ok := interface{}(m.GetGoogleAuthTotpMethod()).(interface{ Validate(bool) error }); ok {
			if err := v.Validate(all); err != nil {
				err = IdentityValidationError{
					field:  "GoogleAuthTotpMethod",
					reason: "embedded message failed validation",
					cause:  err,
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}
		}

	case *Identity_MicrosoftAuthTotpMethod:

		if v, ok := interface{}(m.GetMicrosoftAuthTotpMethod()).(interface{ Validate(bool) error }); ok {
			if err := v.Validate(all); err != nil {
				err = IdentityValidationError{
					field:  "MicrosoftAuthTotpMethod",
					reason: "embedded message failed validation",
					cause:  err,
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}
		}

	case *Identity_HardwareHotpMethod:

		if v, ok := interface{}(m.GetHardwareHotpMethod()).(interface{ Validate(bool) error }); ok {
			if err := v.Validate(all); err != nil {
				err = IdentityValidationError{
					field:  "HardwareHotpMethod",
					reason: "embedded message failed validation",
					cause:  err,
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}
		}

	case *Identity_HardwareTotpMethod:

		if v, ok := interface{}(m.GetHardwareTotpMethod()).(interface{ Validate(bool) error }); ok {
			if err := v.Validate(all); err != nil {
				err = IdentityValidationError{
					field:  "HardwareTotpMethod",
					reason: "embedded message failed validation",
					cause:  err,
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}
		}

	default:
		err := IdentityValidationError{
			field:  "MethodOneof",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if len(errors) > 0 {
		return IdentityMultiError(errors)
	}
	return nil
}

// IdentityMultiError is an error wrapping multiple validation errors returned
// by Identity.Validate(true) if the designated constraints aren't met.
type IdentityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdentityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdentityMultiError) AllErrors() []error { return m }

// IdentityValidationError is the validation error returned by
// Identity.Validate if the designated constraints aren't met.
type IdentityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdentityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdentityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdentityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdentityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdentityValidationError) ErrorName() string { return "IdentityValidationError" }

// Error satisfies the builtin error interface
func (e IdentityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdentity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdentityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdentityValidationError{}

// Validate checks the field values on CreateIdentityRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in CreateIdentityRequestMultiError, or nil if none found.
// Otherwise, only the first error is returned, if any.
func (m *CreateIdentityRequest) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetIdentity() == nil {
		err := CreateIdentityRequestValidationError{
			field:  "Identity",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if v, ok := interface{}(m.GetIdentity()).(interface{ Validate(bool) error }); ok {
		if err := v.Validate(all); err != nil {
			err = CreateIdentityRequestValidationError{
				field:  "Identity",
				reason: "embedded message failed validation",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
	}

	if len(errors) > 0 {
		return CreateIdentityRequestMultiError(errors)
	}
	return nil
}

// CreateIdentityRequestMultiError is an error wrapping multiple validation
// errors returned by CreateIdentityRequest.Validate(true) if the designated
// constraints aren't met.
type CreateIdentityRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateIdentityRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateIdentityRequestMultiError) AllErrors() []error { return m }

// CreateIdentityRequestValidationError is the validation error returned by
// CreateIdentityRequest.Validate if the designated constraints aren't met.
type CreateIdentityRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateIdentityRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateIdentityRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateIdentityRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateIdentityRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateIdentityRequestValidationError) ErrorName() string {
	return "CreateIdentityRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateIdentityRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateIdentityRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateIdentityRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateIdentityRequestValidationError{}

// Validate checks the field values on CreateIdentityResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in CreateIdentityResponseMultiError, or nil if none found.
// Otherwise, only the first error is returned, if any.
func (m *CreateIdentityResponse) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if v, ok := interface{}(m.GetIdentity()).(interface{ Validate(bool) error }); ok {
		if err := v.Validate(all); err != nil {
			err = CreateIdentityResponseValidationError{
				field:  "Identity",
				reason: "embedded message failed validation",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
	}

	// no validation rules for Secret

	// no validation rules for Qr

	if len(errors) > 0 {
		return CreateIdentityResponseMultiError(errors)
	}
	return nil
}

// CreateIdentityResponseMultiError is an error wrapping multiple validation
// errors returned by CreateIdentityResponse.Validate(true) if the designated
// constraints aren't met.
type CreateIdentityResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateIdentityResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateIdentityResponseMultiError) AllErrors() []error { return m }

// CreateIdentityResponseValidationError is the validation error returned by
// CreateIdentityResponse.Validate if the designated constraints aren't met.
type CreateIdentityResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateIdentityResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateIdentityResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateIdentityResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateIdentityResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateIdentityResponseValidationError) ErrorName() string {
	return "CreateIdentityResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateIdentityResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateIdentityResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateIdentityResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateIdentityResponseValidationError{}

// Validate checks the field values on GetIdentityRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in GetIdentityRequestMultiError, or nil if none found.
// Otherwise, only the first error is returned, if any.
func (m *GetIdentityRequest) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = GetIdentityRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetAppId()); err != nil {
		err = GetIdentityRequestValidationError{
			field:  "AppId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetIdentityRequestMultiError(errors)
	}
	return nil
}

func (m *GetIdentityRequest) _validateUuid(uuid string) error {
	if matched := _app_identity_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetIdentityRequestMultiError is an error wrapping multiple validation errors
// returned by GetIdentityRequest.Validate(true) if the designated constraints
// aren't met.
type GetIdentityRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetIdentityRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetIdentityRequestMultiError) AllErrors() []error { return m }

// GetIdentityRequestValidationError is the validation error returned by
// GetIdentityRequest.Validate if the designated constraints aren't met.
type GetIdentityRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetIdentityRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetIdentityRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetIdentityRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetIdentityRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetIdentityRequestValidationError) ErrorName() string {
	return "GetIdentityRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetIdentityRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetIdentityRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetIdentityRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetIdentityRequestValidationError{}

// Validate checks the field values on DeleteIdentityRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in DeleteIdentityRequestMultiError, or nil if none found.
// Otherwise, only the first error is returned, if any.
func (m *DeleteIdentityRequest) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = DeleteIdentityRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetAppId()); err != nil {
		err = DeleteIdentityRequestValidationError{
			field:  "AppId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteIdentityRequestMultiError(errors)
	}
	return nil
}

func (m *DeleteIdentityRequest) _validateUuid(uuid string) error {
	if matched := _app_identity_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// DeleteIdentityRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteIdentityRequest.Validate(true) if the designated
// constraints aren't met.
type DeleteIdentityRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteIdentityRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteIdentityRequestMultiError) AllErrors() []error { return m }

// DeleteIdentityRequestValidationError is the validation error returned by
// DeleteIdentityRequest.Validate if the designated constraints aren't met.
type DeleteIdentityRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteIdentityRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteIdentityRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteIdentityRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteIdentityRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteIdentityRequestValidationError) ErrorName() string {
	return "DeleteIdentityRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteIdentityRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteIdentityRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteIdentityRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteIdentityRequestValidationError{}

// Validate checks the field values on ListIdentitiesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in ListIdentitiesRequestMultiError, or nil if none found.
// Otherwise, only the first error is returned, if any.
func (m *ListIdentitiesRequest) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPageSize() > 250 {
		err := ListIdentitiesRequestValidationError{
			field:  "PageSize",
			reason: "value must be less than or equal to 250",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for PageToken

	if m.GetAppId() != "" {

		if err := m._validateUuid(m.GetAppId()); err != nil {
			err = ListIdentitiesRequestValidationError{
				field:  "AppId",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return ListIdentitiesRequestMultiError(errors)
	}
	return nil
}

func (m *ListIdentitiesRequest) _validateUuid(uuid string) error {
	if matched := _app_identity_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// ListIdentitiesRequestMultiError is an error wrapping multiple validation
// errors returned by ListIdentitiesRequest.Validate(true) if the designated
// constraints aren't met.
type ListIdentitiesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListIdentitiesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListIdentitiesRequestMultiError) AllErrors() []error { return m }

// ListIdentitiesRequestValidationError is the validation error returned by
// ListIdentitiesRequest.Validate if the designated constraints aren't met.
type ListIdentitiesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListIdentitiesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListIdentitiesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListIdentitiesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListIdentitiesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListIdentitiesRequestValidationError) ErrorName() string {
	return "ListIdentitiesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListIdentitiesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListIdentitiesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListIdentitiesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListIdentitiesRequestValidationError{}

// Validate checks the field values on ListIdentitiesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in ListIdentitiesResponseMultiError, or nil if none found.
// Otherwise, only the first error is returned, if any.
func (m *ListIdentitiesResponse) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetIdentities() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate(bool) error }); ok {
			if err := v.Validate(all); err != nil {
				err = ListIdentitiesResponseValidationError{
					field:  fmt.Sprintf("Identities[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}
		}

	}

	// no validation rules for NextPageToken

	// no validation rules for TotalSize

	if len(errors) > 0 {
		return ListIdentitiesResponseMultiError(errors)
	}
	return nil
}

// ListIdentitiesResponseMultiError is an error wrapping multiple validation
// errors returned by ListIdentitiesResponse.Validate(true) if the designated
// constraints aren't met.
type ListIdentitiesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListIdentitiesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListIdentitiesResponseMultiError) AllErrors() []error { return m }

// ListIdentitiesResponseValidationError is the validation error returned by
// ListIdentitiesResponse.Validate if the designated constraints aren't met.
type ListIdentitiesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListIdentitiesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListIdentitiesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListIdentitiesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListIdentitiesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListIdentitiesResponseValidationError) ErrorName() string {
	return "ListIdentitiesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListIdentitiesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListIdentitiesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListIdentitiesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListIdentitiesResponseValidationError{}
