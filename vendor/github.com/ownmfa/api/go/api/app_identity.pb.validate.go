// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/app_identity.proto

package api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// define the regex for a UUID once up-front
var _app_identity_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on App with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *App) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for OrgId

	if l := utf8.RuneCountInString(m.GetName()); l < 5 || l > 40 {
		return AppValidationError{
			field:  "Name",
			reason: "value length must be between 5 and 40 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetDisplayName()); l < 5 || l > 80 {
		return AppValidationError{
			field:  "DisplayName",
			reason: "value length must be between 5 and 80 runes, inclusive",
		}
	}

	if m.GetEmail() != "" {

		if err := m._validateEmail(m.GetEmail()); err != nil {
			return AppValidationError{
				field:  "Email",
				reason: "value must be a valid email address",
				cause:  err,
			}
		}

	}

	if utf8.RuneCountInString(m.GetPushoverKey()) > 45 {
		return AppValidationError{
			field:  "PushoverKey",
			reason: "value length must be at most 45 runes",
		}
	}

	if utf8.RuneCountInString(m.GetSubjectTemplate()) > 1024 {
		return AppValidationError{
			field:  "SubjectTemplate",
			reason: "value length must be at most 1024 runes",
		}
	}

	if utf8.RuneCountInString(m.GetTextBodyTemplate()) > 4096 {
		return AppValidationError{
			field:  "TextBodyTemplate",
			reason: "value length must be at most 4096 runes",
		}
	}

	if len(m.GetHtmlBodyTemplate()) > 4096 {
		return AppValidationError{
			field:  "HtmlBodyTemplate",
			reason: "value length must be at most 4096 bytes",
		}
	}

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AppValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AppValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

func (m *App) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *App) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// AppValidationError is the validation error returned by App.Validate if the
// designated constraints aren't met.
type AppValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AppValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AppValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AppValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AppValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AppValidationError) ErrorName() string { return "AppValidationError" }

// Error satisfies the builtin error interface
func (e AppValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AppValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AppValidationError{}

// Validate checks the field values on CreateAppRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *CreateAppRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetApp() == nil {
		return CreateAppRequestValidationError{
			field:  "App",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetApp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateAppRequestValidationError{
				field:  "App",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateAppRequestValidationError is the validation error returned by
// CreateAppRequest.Validate if the designated constraints aren't met.
type CreateAppRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAppRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAppRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAppRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAppRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAppRequestValidationError) ErrorName() string { return "CreateAppRequestValidationError" }

// Error satisfies the builtin error interface
func (e CreateAppRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAppRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAppRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAppRequestValidationError{}

// Validate checks the field values on GetAppRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GetAppRequest) Validate() error {
	if m == nil {
		return nil
	}

	if err := m._validateUuid(m.GetId()); err != nil {
		return GetAppRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
	}

	return nil
}

func (m *GetAppRequest) _validateUuid(uuid string) error {
	if matched := _app_identity_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetAppRequestValidationError is the validation error returned by
// GetAppRequest.Validate if the designated constraints aren't met.
type GetAppRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAppRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAppRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAppRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAppRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAppRequestValidationError) ErrorName() string { return "GetAppRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetAppRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAppRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAppRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAppRequestValidationError{}

// Validate checks the field values on UpdateAppRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *UpdateAppRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetApp() == nil {
		return UpdateAppRequestValidationError{
			field:  "App",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetApp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateAppRequestValidationError{
				field:  "App",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdateMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateAppRequestValidationError{
				field:  "UpdateMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateAppRequestValidationError is the validation error returned by
// UpdateAppRequest.Validate if the designated constraints aren't met.
type UpdateAppRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAppRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAppRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAppRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAppRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAppRequestValidationError) ErrorName() string { return "UpdateAppRequestValidationError" }

// Error satisfies the builtin error interface
func (e UpdateAppRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAppRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAppRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAppRequestValidationError{}

// Validate checks the field values on DeleteAppRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *DeleteAppRequest) Validate() error {
	if m == nil {
		return nil
	}

	if err := m._validateUuid(m.GetId()); err != nil {
		return DeleteAppRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
	}

	return nil
}

func (m *DeleteAppRequest) _validateUuid(uuid string) error {
	if matched := _app_identity_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// DeleteAppRequestValidationError is the validation error returned by
// DeleteAppRequest.Validate if the designated constraints aren't met.
type DeleteAppRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAppRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAppRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAppRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAppRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAppRequestValidationError) ErrorName() string { return "DeleteAppRequestValidationError" }

// Error satisfies the builtin error interface
func (e DeleteAppRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAppRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAppRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAppRequestValidationError{}

// Validate checks the field values on ListAppsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListAppsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetPageSize() > 250 {
		return ListAppsRequestValidationError{
			field:  "PageSize",
			reason: "value must be less than or equal to 250",
		}
	}

	// no validation rules for PageToken

	return nil
}

// ListAppsRequestValidationError is the validation error returned by
// ListAppsRequest.Validate if the designated constraints aren't met.
type ListAppsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAppsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAppsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAppsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAppsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAppsRequestValidationError) ErrorName() string { return "ListAppsRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListAppsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAppsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAppsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAppsRequestValidationError{}

// Validate checks the field values on ListAppsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListAppsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetApps() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAppsResponseValidationError{
					field:  fmt.Sprintf("Apps[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	// no validation rules for TotalSize

	return nil
}

// ListAppsResponseValidationError is the validation error returned by
// ListAppsResponse.Validate if the designated constraints aren't met.
type ListAppsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAppsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAppsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAppsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAppsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAppsResponseValidationError) ErrorName() string { return "ListAppsResponseValidationError" }

// Error satisfies the builtin error interface
func (e ListAppsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAppsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAppsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAppsResponseValidationError{}

// Validate checks the field values on SoftwareHOTPMethod with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SoftwareHOTPMethod) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Hash

	if m.GetDigits() != 0 {

		if val := m.GetDigits(); val < 6 || val > 10 {
			return SoftwareHOTPMethodValidationError{
				field:  "Digits",
				reason: "value must be inside range [6, 10]",
			}
		}

	}

	// no validation rules for Counter

	if utf8.RuneCountInString(m.GetAccountName()) > 80 {
		return SoftwareHOTPMethodValidationError{
			field:  "AccountName",
			reason: "value length must be at most 80 runes",
		}
	}

	return nil
}

// SoftwareHOTPMethodValidationError is the validation error returned by
// SoftwareHOTPMethod.Validate if the designated constraints aren't met.
type SoftwareHOTPMethodValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SoftwareHOTPMethodValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SoftwareHOTPMethodValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SoftwareHOTPMethodValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SoftwareHOTPMethodValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SoftwareHOTPMethodValidationError) ErrorName() string {
	return "SoftwareHOTPMethodValidationError"
}

// Error satisfies the builtin error interface
func (e SoftwareHOTPMethodValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSoftwareHOTPMethod.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SoftwareHOTPMethodValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SoftwareHOTPMethodValidationError{}

// Validate checks the field values on SoftwareTOTPMethod with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SoftwareTOTPMethod) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Hash

	if m.GetDigits() != 0 {

		if val := m.GetDigits(); val < 6 || val > 10 {
			return SoftwareTOTPMethodValidationError{
				field:  "Digits",
				reason: "value must be inside range [6, 10]",
			}
		}

	}

	if utf8.RuneCountInString(m.GetAccountName()) > 80 {
		return SoftwareTOTPMethodValidationError{
			field:  "AccountName",
			reason: "value length must be at most 80 runes",
		}
	}

	return nil
}

// SoftwareTOTPMethodValidationError is the validation error returned by
// SoftwareTOTPMethod.Validate if the designated constraints aren't met.
type SoftwareTOTPMethodValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SoftwareTOTPMethodValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SoftwareTOTPMethodValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SoftwareTOTPMethodValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SoftwareTOTPMethodValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SoftwareTOTPMethodValidationError) ErrorName() string {
	return "SoftwareTOTPMethodValidationError"
}

// Error satisfies the builtin error interface
func (e SoftwareTOTPMethodValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSoftwareTOTPMethod.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SoftwareTOTPMethodValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SoftwareTOTPMethodValidationError{}

// Validate checks the field values on GoogleAuthHOTPMethod with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GoogleAuthHOTPMethod) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetAccountName()) > 80 {
		return GoogleAuthHOTPMethodValidationError{
			field:  "AccountName",
			reason: "value length must be at most 80 runes",
		}
	}

	return nil
}

// GoogleAuthHOTPMethodValidationError is the validation error returned by
// GoogleAuthHOTPMethod.Validate if the designated constraints aren't met.
type GoogleAuthHOTPMethodValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GoogleAuthHOTPMethodValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GoogleAuthHOTPMethodValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GoogleAuthHOTPMethodValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GoogleAuthHOTPMethodValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GoogleAuthHOTPMethodValidationError) ErrorName() string {
	return "GoogleAuthHOTPMethodValidationError"
}

// Error satisfies the builtin error interface
func (e GoogleAuthHOTPMethodValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGoogleAuthHOTPMethod.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GoogleAuthHOTPMethodValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GoogleAuthHOTPMethodValidationError{}

// Validate checks the field values on GoogleAuthTOTPMethod with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GoogleAuthTOTPMethod) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetAccountName()) > 80 {
		return GoogleAuthTOTPMethodValidationError{
			field:  "AccountName",
			reason: "value length must be at most 80 runes",
		}
	}

	return nil
}

// GoogleAuthTOTPMethodValidationError is the validation error returned by
// GoogleAuthTOTPMethod.Validate if the designated constraints aren't met.
type GoogleAuthTOTPMethodValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GoogleAuthTOTPMethodValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GoogleAuthTOTPMethodValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GoogleAuthTOTPMethodValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GoogleAuthTOTPMethodValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GoogleAuthTOTPMethodValidationError) ErrorName() string {
	return "GoogleAuthTOTPMethodValidationError"
}

// Error satisfies the builtin error interface
func (e GoogleAuthTOTPMethodValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGoogleAuthTOTPMethod.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GoogleAuthTOTPMethodValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GoogleAuthTOTPMethodValidationError{}

// Validate checks the field values on AppleiOSTOTPMethod with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AppleiOSTOTPMethod) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// AppleiOSTOTPMethodValidationError is the validation error returned by
// AppleiOSTOTPMethod.Validate if the designated constraints aren't met.
type AppleiOSTOTPMethodValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AppleiOSTOTPMethodValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AppleiOSTOTPMethodValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AppleiOSTOTPMethodValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AppleiOSTOTPMethodValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AppleiOSTOTPMethodValidationError) ErrorName() string {
	return "AppleiOSTOTPMethodValidationError"
}

// Error satisfies the builtin error interface
func (e AppleiOSTOTPMethodValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAppleiOSTOTPMethod.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AppleiOSTOTPMethodValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AppleiOSTOTPMethodValidationError{}

// Validate checks the field values on HardwareHOTPMethod with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *HardwareHOTPMethod) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Hash

	if val := m.GetDigits(); val < 6 || val > 10 {
		return HardwareHOTPMethodValidationError{
			field:  "Digits",
			reason: "value must be inside range [6, 10]",
		}
	}

	// no validation rules for Counter

	if len(m.GetSecret()) < 16 {
		return HardwareHOTPMethodValidationError{
			field:  "Secret",
			reason: "value length must be at least 16 bytes",
		}
	}

	return nil
}

// HardwareHOTPMethodValidationError is the validation error returned by
// HardwareHOTPMethod.Validate if the designated constraints aren't met.
type HardwareHOTPMethodValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HardwareHOTPMethodValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HardwareHOTPMethodValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HardwareHOTPMethodValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HardwareHOTPMethodValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HardwareHOTPMethodValidationError) ErrorName() string {
	return "HardwareHOTPMethodValidationError"
}

// Error satisfies the builtin error interface
func (e HardwareHOTPMethodValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHardwareHOTPMethod.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HardwareHOTPMethodValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HardwareHOTPMethodValidationError{}

// Validate checks the field values on HardwareTOTPMethod with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *HardwareTOTPMethod) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Hash

	if val := m.GetDigits(); val < 6 || val > 10 {
		return HardwareTOTPMethodValidationError{
			field:  "Digits",
			reason: "value must be inside range [6, 10]",
		}
	}

	if len(m.GetSecret()) < 16 {
		return HardwareTOTPMethodValidationError{
			field:  "Secret",
			reason: "value length must be at least 16 bytes",
		}
	}

	return nil
}

// HardwareTOTPMethodValidationError is the validation error returned by
// HardwareTOTPMethod.Validate if the designated constraints aren't met.
type HardwareTOTPMethodValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HardwareTOTPMethodValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HardwareTOTPMethodValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HardwareTOTPMethodValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HardwareTOTPMethodValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HardwareTOTPMethodValidationError) ErrorName() string {
	return "HardwareTOTPMethodValidationError"
}

// Error satisfies the builtin error interface
func (e HardwareTOTPMethodValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHardwareTOTPMethod.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HardwareTOTPMethodValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HardwareTOTPMethodValidationError{}

// Validate checks the field values on SMSMethod with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *SMSMethod) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetPhone()); l < 8 || l > 16 {
		return SMSMethodValidationError{
			field:  "Phone",
			reason: "value length must be between 8 and 16 runes, inclusive",
		}
	}

	return nil
}

// SMSMethodValidationError is the validation error returned by
// SMSMethod.Validate if the designated constraints aren't met.
type SMSMethodValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SMSMethodValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SMSMethodValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SMSMethodValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SMSMethodValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SMSMethodValidationError) ErrorName() string { return "SMSMethodValidationError" }

// Error satisfies the builtin error interface
func (e SMSMethodValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSMSMethod.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SMSMethodValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SMSMethodValidationError{}

// Validate checks the field values on PushoverMethod with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *PushoverMethod) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetPushoverKey()); l < 25 || l > 45 {
		return PushoverMethodValidationError{
			field:  "PushoverKey",
			reason: "value length must be between 25 and 45 runes, inclusive",
		}
	}

	return nil
}

// PushoverMethodValidationError is the validation error returned by
// PushoverMethod.Validate if the designated constraints aren't met.
type PushoverMethodValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PushoverMethodValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PushoverMethodValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PushoverMethodValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PushoverMethodValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PushoverMethodValidationError) ErrorName() string { return "PushoverMethodValidationError" }

// Error satisfies the builtin error interface
func (e PushoverMethodValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPushoverMethod.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PushoverMethodValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PushoverMethodValidationError{}

// Validate checks the field values on EmailMethod with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *EmailMethod) Validate() error {
	if m == nil {
		return nil
	}

	if err := m._validateEmail(m.GetEmail()); err != nil {
		return EmailMethodValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
	}

	return nil
}

func (m *EmailMethod) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *EmailMethod) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// EmailMethodValidationError is the validation error returned by
// EmailMethod.Validate if the designated constraints aren't met.
type EmailMethodValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmailMethodValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmailMethodValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmailMethodValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmailMethodValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmailMethodValidationError) ErrorName() string { return "EmailMethodValidationError" }

// Error satisfies the builtin error interface
func (e EmailMethodValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmailMethod.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmailMethodValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmailMethodValidationError{}

// Validate checks the field values on BackupsCodesMethod with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *BackupsCodesMethod) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetPasscodes(); val < 6 || val > 10 {
		return BackupsCodesMethodValidationError{
			field:  "Passcodes",
			reason: "value must be inside range [6, 10]",
		}
	}

	return nil
}

// BackupsCodesMethodValidationError is the validation error returned by
// BackupsCodesMethod.Validate if the designated constraints aren't met.
type BackupsCodesMethodValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BackupsCodesMethodValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BackupsCodesMethodValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BackupsCodesMethodValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BackupsCodesMethodValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BackupsCodesMethodValidationError) ErrorName() string {
	return "BackupsCodesMethodValidationError"
}

// Error satisfies the builtin error interface
func (e BackupsCodesMethodValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBackupsCodesMethod.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BackupsCodesMethodValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BackupsCodesMethodValidationError{}

// Validate checks the field values on SecurityQuestionsMethod with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SecurityQuestionsMethod) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetAnswer()); l < 3 || l > 80 {
		return SecurityQuestionsMethodValidationError{
			field:  "Answer",
			reason: "value length must be between 3 and 80 runes, inclusive",
		}
	}

	return nil
}

// SecurityQuestionsMethodValidationError is the validation error returned by
// SecurityQuestionsMethod.Validate if the designated constraints aren't met.
type SecurityQuestionsMethodValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SecurityQuestionsMethodValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SecurityQuestionsMethodValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SecurityQuestionsMethodValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SecurityQuestionsMethodValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SecurityQuestionsMethodValidationError) ErrorName() string {
	return "SecurityQuestionsMethodValidationError"
}

// Error satisfies the builtin error interface
func (e SecurityQuestionsMethodValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSecurityQuestionsMethod.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SecurityQuestionsMethodValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SecurityQuestionsMethodValidationError{}

// Validate checks the field values on Identity with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Identity) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for OrgId

	// no validation rules for AppId

	if l := utf8.RuneCountInString(m.GetComment()); l < 5 || l > 80 {
		return IdentityValidationError{
			field:  "Comment",
			reason: "value length must be between 5 and 80 runes, inclusive",
		}
	}

	// no validation rules for Status

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IdentityValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IdentityValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch m.MethodOneof.(type) {

	case *Identity_SoftwareHotpMethod:

		if v, ok := interface{}(m.GetSoftwareHotpMethod()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return IdentityValidationError{
					field:  "SoftwareHotpMethod",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Identity_SoftwareTotpMethod:

		if v, ok := interface{}(m.GetSoftwareTotpMethod()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return IdentityValidationError{
					field:  "SoftwareTotpMethod",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Identity_GoogleAuthHotpMethod:

		if v, ok := interface{}(m.GetGoogleAuthHotpMethod()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return IdentityValidationError{
					field:  "GoogleAuthHotpMethod",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Identity_GoogleAuthTotpMethod:

		if v, ok := interface{}(m.GetGoogleAuthTotpMethod()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return IdentityValidationError{
					field:  "GoogleAuthTotpMethod",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Identity_AppleIosTotpMethod:

		if v, ok := interface{}(m.GetAppleIosTotpMethod()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return IdentityValidationError{
					field:  "AppleIosTotpMethod",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Identity_HardwareHotpMethod:

		if v, ok := interface{}(m.GetHardwareHotpMethod()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return IdentityValidationError{
					field:  "HardwareHotpMethod",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Identity_HardwareTotpMethod:

		if v, ok := interface{}(m.GetHardwareTotpMethod()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return IdentityValidationError{
					field:  "HardwareTotpMethod",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Identity_SmsMethod:

		if v, ok := interface{}(m.GetSmsMethod()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return IdentityValidationError{
					field:  "SmsMethod",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Identity_PushoverMethod:

		if v, ok := interface{}(m.GetPushoverMethod()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return IdentityValidationError{
					field:  "PushoverMethod",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Identity_EmailMethod:

		if v, ok := interface{}(m.GetEmailMethod()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return IdentityValidationError{
					field:  "EmailMethod",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Identity_BackupCodesMethod:

		if v, ok := interface{}(m.GetBackupCodesMethod()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return IdentityValidationError{
					field:  "BackupCodesMethod",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Identity_SecurityQuestionsMethod:

		if v, ok := interface{}(m.GetSecurityQuestionsMethod()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return IdentityValidationError{
					field:  "SecurityQuestionsMethod",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		return IdentityValidationError{
			field:  "MethodOneof",
			reason: "value is required",
		}

	}

	return nil
}

// IdentityValidationError is the validation error returned by
// Identity.Validate if the designated constraints aren't met.
type IdentityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdentityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdentityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdentityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdentityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdentityValidationError) ErrorName() string { return "IdentityValidationError" }

// Error satisfies the builtin error interface
func (e IdentityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdentity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdentityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdentityValidationError{}

// Validate checks the field values on CreateIdentityRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateIdentityRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetIdentity() == nil {
		return CreateIdentityRequestValidationError{
			field:  "Identity",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetIdentity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateIdentityRequestValidationError{
				field:  "Identity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateIdentityRequestValidationError is the validation error returned by
// CreateIdentityRequest.Validate if the designated constraints aren't met.
type CreateIdentityRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateIdentityRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateIdentityRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateIdentityRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateIdentityRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateIdentityRequestValidationError) ErrorName() string {
	return "CreateIdentityRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateIdentityRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateIdentityRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateIdentityRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateIdentityRequestValidationError{}

// Validate checks the field values on CreateIdentityResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateIdentityResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetIdentity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateIdentityResponseValidationError{
				field:  "Identity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Secret

	// no validation rules for Qr

	return nil
}

// CreateIdentityResponseValidationError is the validation error returned by
// CreateIdentityResponse.Validate if the designated constraints aren't met.
type CreateIdentityResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateIdentityResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateIdentityResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateIdentityResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateIdentityResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateIdentityResponseValidationError) ErrorName() string {
	return "CreateIdentityResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateIdentityResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateIdentityResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateIdentityResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateIdentityResponseValidationError{}

// Validate checks the field values on ActivateIdentityRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ActivateIdentityRequest) Validate() error {
	if m == nil {
		return nil
	}

	if err := m._validateUuid(m.GetId()); err != nil {
		return ActivateIdentityRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
	}

	if err := m._validateUuid(m.GetAppId()); err != nil {
		return ActivateIdentityRequestValidationError{
			field:  "AppId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
	}

	if l := utf8.RuneCountInString(m.GetPasscode()); l < 3 || l > 80 {
		return ActivateIdentityRequestValidationError{
			field:  "Passcode",
			reason: "value length must be between 3 and 80 runes, inclusive",
		}
	}

	return nil
}

func (m *ActivateIdentityRequest) _validateUuid(uuid string) error {
	if matched := _app_identity_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// ActivateIdentityRequestValidationError is the validation error returned by
// ActivateIdentityRequest.Validate if the designated constraints aren't met.
type ActivateIdentityRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ActivateIdentityRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ActivateIdentityRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ActivateIdentityRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ActivateIdentityRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ActivateIdentityRequestValidationError) ErrorName() string {
	return "ActivateIdentityRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ActivateIdentityRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sActivateIdentityRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ActivateIdentityRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ActivateIdentityRequestValidationError{}

// Validate checks the field values on ChallengeIdentityRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ChallengeIdentityRequest) Validate() error {
	if m == nil {
		return nil
	}

	if err := m._validateUuid(m.GetId()); err != nil {
		return ChallengeIdentityRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
	}

	if err := m._validateUuid(m.GetAppId()); err != nil {
		return ChallengeIdentityRequestValidationError{
			field:  "AppId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
	}

	return nil
}

func (m *ChallengeIdentityRequest) _validateUuid(uuid string) error {
	if matched := _app_identity_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// ChallengeIdentityRequestValidationError is the validation error returned by
// ChallengeIdentityRequest.Validate if the designated constraints aren't met.
type ChallengeIdentityRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChallengeIdentityRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChallengeIdentityRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChallengeIdentityRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChallengeIdentityRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChallengeIdentityRequestValidationError) ErrorName() string {
	return "ChallengeIdentityRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ChallengeIdentityRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChallengeIdentityRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChallengeIdentityRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChallengeIdentityRequestValidationError{}

// Validate checks the field values on VerifyIdentityRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *VerifyIdentityRequest) Validate() error {
	if m == nil {
		return nil
	}

	if err := m._validateUuid(m.GetId()); err != nil {
		return VerifyIdentityRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
	}

	if err := m._validateUuid(m.GetAppId()); err != nil {
		return VerifyIdentityRequestValidationError{
			field:  "AppId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
	}

	if l := utf8.RuneCountInString(m.GetPasscode()); l < 3 || l > 80 {
		return VerifyIdentityRequestValidationError{
			field:  "Passcode",
			reason: "value length must be between 3 and 80 runes, inclusive",
		}
	}

	return nil
}

func (m *VerifyIdentityRequest) _validateUuid(uuid string) error {
	if matched := _app_identity_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// VerifyIdentityRequestValidationError is the validation error returned by
// VerifyIdentityRequest.Validate if the designated constraints aren't met.
type VerifyIdentityRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyIdentityRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyIdentityRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyIdentityRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyIdentityRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyIdentityRequestValidationError) ErrorName() string {
	return "VerifyIdentityRequestValidationError"
}

// Error satisfies the builtin error interface
func (e VerifyIdentityRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyIdentityRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyIdentityRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyIdentityRequestValidationError{}

// Validate checks the field values on GetIdentityRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetIdentityRequest) Validate() error {
	if m == nil {
		return nil
	}

	if err := m._validateUuid(m.GetId()); err != nil {
		return GetIdentityRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
	}

	if err := m._validateUuid(m.GetAppId()); err != nil {
		return GetIdentityRequestValidationError{
			field:  "AppId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
	}

	return nil
}

func (m *GetIdentityRequest) _validateUuid(uuid string) error {
	if matched := _app_identity_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetIdentityRequestValidationError is the validation error returned by
// GetIdentityRequest.Validate if the designated constraints aren't met.
type GetIdentityRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetIdentityRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetIdentityRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetIdentityRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetIdentityRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetIdentityRequestValidationError) ErrorName() string {
	return "GetIdentityRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetIdentityRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetIdentityRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetIdentityRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetIdentityRequestValidationError{}

// Validate checks the field values on DeleteIdentityRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteIdentityRequest) Validate() error {
	if m == nil {
		return nil
	}

	if err := m._validateUuid(m.GetId()); err != nil {
		return DeleteIdentityRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
	}

	if err := m._validateUuid(m.GetAppId()); err != nil {
		return DeleteIdentityRequestValidationError{
			field:  "AppId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
	}

	return nil
}

func (m *DeleteIdentityRequest) _validateUuid(uuid string) error {
	if matched := _app_identity_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// DeleteIdentityRequestValidationError is the validation error returned by
// DeleteIdentityRequest.Validate if the designated constraints aren't met.
type DeleteIdentityRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteIdentityRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteIdentityRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteIdentityRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteIdentityRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteIdentityRequestValidationError) ErrorName() string {
	return "DeleteIdentityRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteIdentityRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteIdentityRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteIdentityRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteIdentityRequestValidationError{}

// Validate checks the field values on ListIdentitiesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListIdentitiesRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetPageSize() > 250 {
		return ListIdentitiesRequestValidationError{
			field:  "PageSize",
			reason: "value must be less than or equal to 250",
		}
	}

	// no validation rules for PageToken

	if m.GetAppId() != "" {

		if err := m._validateUuid(m.GetAppId()); err != nil {
			return ListIdentitiesRequestValidationError{
				field:  "AppId",
				reason: "value must be a valid UUID",
				cause:  err,
			}
		}

	}

	return nil
}

func (m *ListIdentitiesRequest) _validateUuid(uuid string) error {
	if matched := _app_identity_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// ListIdentitiesRequestValidationError is the validation error returned by
// ListIdentitiesRequest.Validate if the designated constraints aren't met.
type ListIdentitiesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListIdentitiesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListIdentitiesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListIdentitiesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListIdentitiesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListIdentitiesRequestValidationError) ErrorName() string {
	return "ListIdentitiesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListIdentitiesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListIdentitiesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListIdentitiesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListIdentitiesRequestValidationError{}

// Validate checks the field values on ListIdentitiesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListIdentitiesResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetIdentities() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListIdentitiesResponseValidationError{
					field:  fmt.Sprintf("Identities[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	// no validation rules for TotalSize

	return nil
}

// ListIdentitiesResponseValidationError is the validation error returned by
// ListIdentitiesResponse.Validate if the designated constraints aren't met.
type ListIdentitiesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListIdentitiesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListIdentitiesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListIdentitiesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListIdentitiesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListIdentitiesResponseValidationError) ErrorName() string {
	return "ListIdentitiesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListIdentitiesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListIdentitiesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListIdentitiesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListIdentitiesResponseValidationError{}
